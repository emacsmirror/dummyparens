;; Boost Software License - Version 1.0 - August 17th, 2003

;; Permission is hereby granted, free of charge, to any person or organization
;; obtaining a copy of the software and accompanying documentation covered by
;; this license (the "Software") to use, reproduce, display, distribute,
;; execute, and transmit the Software, and to prepare derivative works of the
;; Software, and to permit third-parties to whom the Software is furnished to
;; do so, all subject to the following:

;; The copyright notices in the Software and this entire statement, including
;; the above license grant, this restriction and the following disclaimer,
;; must be included in all copies of the Software, in whole or in part, and
;; all derivative works of the Software, unless such copies or derivative
;; works are solely in the form of machine-executable object code generated by
;; a source language processor.

;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;; FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
;; SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
;; FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
;; ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
;; DEALINGS IN THE SOFTWARE.

;; ABOUT: dummy parens is a simple utility providing parentheses
;; auto-pairing and wrapping behavior

(defun dp-brace-post-handler ()
  "Indents after insertion"
  (when dp-wrap
    (indent-region (car dp-wrap) (cdr dp-wrap)))
  (indent-for-tab-command))

(defcustom dp-pairs '(
                      ("(" ")" nil)
                      ("[" "]" nil)
                      ("{" "}" dp-brace-post-handler)
                      ("\"" "\"" nil)
                      )
  "Parenthesis to be paired")

(defcustom dp-ignore-modes-list '(
                                  minibuffer-inactive-mode
                                  )
  "Modes where dummyparens mode is inactive if allowed globally."
  :type '(repeat symbol))

(defun dp-self-insert-command (arg)
  "This function should be binded to opening pair"
  (interactive "p")
  (if (not (region-active-p))
      ;; we're not wrapping
      (setq dp-wrap nil)
    ;; save point and mark position
    (setq dp-wrap (cons (region-beginning)
                        (1+ (region-end)))) ;; 1+ since we call self-insert next
    (goto-char (car dp-wrap)))

  ;; which key was pressed
  (setq key (single-key-description last-command-event))
  ;; call the command that would've been called without dummyparens
  (let ((dummyparens-mode nil))
    (funcall (key-binding key t) arg))

  (save-excursion
    ;; for each pair
    (dolist (pair dp-pairs)
      ;; test if pressed key corresponds to an opening pair
      (when (equal key (car pair))
        ;; goto region end when wrapping
        (when dp-wrap
          (goto-char (cdr dp-wrap)))
        (let ((closing-pair (nth 1 pair))
              (post-handler (nth 2 pair)))
          (insert closing-pair)
          ;; run post-handler
          (when post-handler
            (funcall post-handler)))))))

(defvar dp-keymap (make-sparse-keymap)
  "Keymap used for `dummyparens-mode'.")
(dolist (pair dp-pairs)
  (define-key dp-keymap (car pair) 'dp-self-insert-command))

(define-minor-mode dummyparens-mode
  "Toggle dummyparens mode."
  :keymap dp-keymap)

(defun turn-on-dummyparens-mode ()
  "Turn on `dummyparens-mode'."
  (interactive)
  (unless (or (member major-mode dp-ignore-modes-list)
              (eq (get major-mode 'mode-class) 'special))
    (dummyparens-mode t)))

(define-globalized-minor-mode global-dummyparens-mode
  dummyparens-mode
  turn-on-dummyparens-mode)

(provide 'dummyparens)
